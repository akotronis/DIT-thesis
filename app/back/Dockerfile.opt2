FROM python:3.12-slim AS build

RUN apt-get update && \
    # -y: Automatically answers "yes" to prompts during the installation process
    apt-get upgrade -y && \
    # --no-install-recommends: install only the specified package and its essential dependencies, excluding any recommended (optional) packages
    apt-get install -y --no-install-recommends \
    iproute2 \
    curl \
    # For Postgres
    gcc \
    libpq-dev \
    # For PostGIS
    gdal-bin \
    libgdal-dev \
    libgeos-dev \
    libproj-dev && \
    # Removes cached files from /var/cache/apt/archives and /var/cache/apt/archives/partial that are used during the package installation process
    apt-get clean && \
    # Deletes the local copy of package metadata downloaded when you run apt-get update
    rm -rf /var/lib/apt/lists/*

# Disable writing .pyc files to disk
ENV PYTHONDONTWRITEBYTECODE=1

# Define stdout/stderr as unbuffered
ENV PYTHONUNBUFFERED=1

# Set app path env variable
ENV APP=/opt/back/dit-app

# Set virtualenv path env variable
ENV VIRTUAL_ENV=$APP/.venv

# Make sure we use the virtualenv
ENV PATH="$VIRTUAL_ENV/bin:$PATH"

# Set working directory
WORKDIR $APP

# Make virtualenv
RUN python -m venv $VIRTUAL_ENV

# Copy dependencies if we work with requirements.txt
COPY ./dit-app/requirements.txt .

# Install dependencies
RUN pip install --upgrade pip && \
    pip install --no-cache-dir --upgrade -r requirements.txt

#########################################################

FROM python:3.12-slim AS final

RUN apt-get update && \
    # -y: Automatically answers "yes" to prompts during the installation process
    apt-get upgrade -y && \
    # --no-install-recommends: install only the specified package and its essential dependencies, excluding any recommended (optional) packages
    apt-get install -y --no-install-recommends \
    iproute2 \
    curl \
    # For Postgres
    libpq5 \
    # For PostGIS
    libgdal32 \
    libgeos-c1v5 \
    libproj25 && \
    # Removes cached files from /var/cache/apt/archives and /var/cache/apt/archives/partial that are used during the package installation process
    apt-get clean && \
    # Deletes the local copy of package metadata downloaded when you run apt-get update
    rm -rf /var/lib/apt/lists/*

# # Set app path env variable
ENV APP=/opt/back/dit-app

# # Set virtualenv path env variable
ENV VIRTUAL_ENV=$APP/.venv

# # Make sure we use the virtualenv
ENV PATH="$VIRTUAL_ENV/bin:$PATH"

WORKDIR $APP

COPY --from=build $VIRTUAL_ENV $VIRTUAL_ENV
COPY ./dit-app .

# Keep container open for development
CMD ["tail", "-f", "/dev/null"]
# Start Django server
# CMD ["python", "manage.py", "runserver", "0.0.0.0:8000"]